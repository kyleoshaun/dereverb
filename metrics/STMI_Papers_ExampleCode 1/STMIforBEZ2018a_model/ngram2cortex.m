function cr = ngram2cortex(y, frmlen, rv, sv)
% ngram2cortex (forward) cortical rate-scale representation
%	cr	: cortical representation (4D, scale-rate(up-down)-time-freq.)
%	y	: auditory spectrogram, N-by-M, where
%		N = # of samples, M = # of channels
%	 frmlen	(in ms): frame length, typically, 8, 16 or 2^[natural #] ms.
%	 rv	: rate vector in Hz, e.g., 2.^(1:.5:5).
%	 sv	: scale vector in cyc/oct, e.g., 2.^(-2:.5:3).
%
%	ngram2cortex implements the 2-D wavelet transform
%	possibly executed by the A1 cortex. The auditory
%	spectrogram (Y) is the output generated by the 
%	cochlear model. RV (SV) is the characteristic frequencies
%	(ripples) of the temporal (spatial) filters.

% dimensions
K1 	= length(rv);	% # of rate channel
K2	= length(sv);	% # of scale channel
[N, M]	= size(y);	% dimensions of auditory spectrogram

% spatial, temporal zeros padding 
N1 = 2^nextpow2(N);	N2 = N1*2;
M1 = 2^nextpow2(M);	M2 = M1*2;

% first fourier transform (w.r.t. frequency axis)
Y = zeros(N2, M1);
for n = 1:N,
    R1 = fft(y(n, :), M2);
    Y(n, :) = R1(1:M1);
end;

% second fourier transform (w.r.t. temporal axis)
for m = 1:M1,
    R1 = fft(Y(1:N, m), N2);
    Y(:, m) = R1;
end;

STF = 1.0 / frmlen;  % frame per second
SRF = 24;		     % channel per octave (fixed)

t0 = clock;

FULLX=0; FULLT=0;

% freq. index
dM   = floor(M/2*FULLX);
mdx1 = [(1:dM)+M2-dM 1:M+dM];
mdx2 = [0 0 M+1 M+1 0]+dM;

% temp. index
dN   = floor(N/2*FULLT);
ndx  = 1:N+2*dN;
ndx1 = ndx;
ndx2 = [0 N+1 N+1 0 0];

z  = zeros(N+2*dN, M+2*dM);
cr = zeros(K2, K1*2, N+2*dN, M+2*dM);
%	 BP	: pure bandpass indicator
BP = 0.0;

for rdx = 1:K1,
    % rate filtering
    fc_rt = rv(rdx);
    HR = gen_cort(fc_rt, N1, STF, [rdx+BP K1+BP*2]); % if BP, all BPF 
    
    for sgn = [1 -1]
        
        % rate filtering modification
        if sgn > 0,
            HR = [HR; zeros(N1, 1)];	% SSB -> DSB
            ix=0;
        else,
            HR = [HR(1); conj(flipud(HR(2:N2)))];
            %HR = [0; conj(flipud(HR(2:N2)))];
            HR(N1+1) = abs(HR(N1+2));
            ix=1;
        end;
        
        % first inverse fft (w.r.t. time axis)
        z1= zeros(N2,M1); 
        for m = 1:M1, 
            z1(:,m)= HR.*Y(:,m);
        end;	
        z1= ifft(z1);
        z1= z1(ndx1,:);
        
        for sdx = 1:K2,
            % scale filtering
            fc_sc = sv(sdx);
            HS = gen_corf(fc_sc, M1, SRF, [sdx+BP K2+BP*2]);% if BP, all BPF
            
            % second inverse fft (w.r.t frequency axis)
            for n = ndx,
                R1 = ifft((z1(n, :).*HS'), M2); 
                z(n, :) = R1(mdx1);
            end;	
            
            cr(sdx, rdx*sgn+K1+ix, :, :) = z;
        end;
    end;
    time_est(rdx, K1, 1, t0);    
end;
